// Generated by CoffeeScript 1.6.3
var A, ABBR, ACRONYM, ADDRESS, APPLET, AREA, ARTICLE, ASIDE, AUDIO, B, BASE, BASEFONT, BDI, BDO, BGSOUND, BIG, BLINK, BLOCKQUOTE, BODY, BR, BUTTON, CANVAS, CAPTION, CENTER, CITE, CODE, COL, COLGROUP, CONTENT, DATA, DATALIST, DD, DECORATOR, DEL, DETAILS, DFN, DIR, DIV, DL, DT, ELEMENT, EM, EMBED, FIELDSET, FIGCAPTION, FIGURE, FONT, FOOTER, FORM, FRAME, FRAMESET, H1, H2, H3, H4, H5, H6, HEAD, HEADER, HGROUP, HR, HTML, I, IFRAME, IMG, INPUT, INS, ISINDEX, KBD, KEYGEN, LABEL, LEGEND, LI, LINK, LISTING, MAIN, MAP, MARK, MARQUEE, MENU, MENUITEM, META, METER, NAV, NOBR, NOFRAMES, NOSCRIPT, OBJECT, OL, OPTGROUP, OPTION, OUTPUT, P, PARAM, PLAINTEXT, PRE, PROGRESS, Q, RP, RT, RUBY, S, SAMP, SCRIPT, SECTION, SELECT, SHADOW, SMALL, SOURCE, SPACER, SPAN, STRIKE, STRONG, STYLE, SUB, SUMMARY, SUP, TABLE, TBODY, TD, TEMPLATE, TEXTAREA, TFOOT, TH, THEAD, TIME, TITLE, TR, TRACK, TT, U, UL, VAR, VIDEO, WBR, XML, XMP, type, _A, _ABBR, _ACRONYM, _ADDRESS, _APPLET, _AREA, _ARTICLE, _ASIDE, _AUDIO, _B, _BASE, _BASEFONT, _BDI, _BDO, _BGSOUND, _BIG, _BLINK, _BLOCKQUOTE, _BODY, _BR, _BUTTON, _CANVAS, _CAPTION, _CENTER, _CITE, _CODE, _COL, _COLGROUP, _CONTENT, _DATA, _DATALIST, _DD, _DECORATOR, _DEL, _DETAILS, _DFN, _DIR, _DIV, _DL, _DT, _ELEMENT, _EM, _EMBED, _FIELDSET, _FIGCAPTION, _FIGURE, _FONT, _FOOTER, _FORM, _FRAME, _FRAMESET, _H1, _H2, _H3, _H4, _H5, _H6, _HEAD, _HEADER, _HGROUP, _HR, _HTML, _I, _IFRAME, _IMG, _INPUT, _INS, _ISINDEX, _KBD, _KEYGEN, _LABEL, _LEGEND, _LI, _LINK, _LISTING, _MAIN, _MAP, _MARK, _MARQUEE, _MENU, _MENUITEM, _META, _METER, _NAV, _NOBR, _NOFRAMES, _NOSCRIPT, _OBJECT, _OL, _OPTGROUP, _OPTION, _OUTPUT, _P, _PARAM, _PLAINTEXT, _PRE, _PROGRESS, _Q, _RP, _RT, _RUBY, _S, _SAMP, _SCRIPT, _SECTION, _SELECT, _SHADOW, _SMALL, _SOURCE, _SPACER, _SPAN, _STRIKE, _STRONG, _STYLE, _SUB, _SUMMARY, _SUP, _TABLE, _TBODY, _TD, _TEMPLATE, _TEXTAREA, _TFOOT, _TH, _THEAD, _TIME, _TITLE, _TR, _TRACK, _TT, _U, _UL, _VAR, _VIDEO, _WBR, _XMP,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

type = function(obj) {
  var classToType, myClass, name, _i, _len, _ref;
  if (obj === void 0 || obj === null) {
    return String(obj);
  }
  classToType = new Object;
  _ref = "Boolean Number String Function Array Date RegExp".split(" ");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    classToType["[object " + name + "]"] = name.toLowerCase();
  }
  myClass = Object.prototype.toString.call(obj);
  if (myClass in classToType) {
    return classToType[myClass];
  }
  return "object";
};

XML = (function() {
  function XML() {
    var arg, content, index, tag, _ref;
    tag = arguments[0], content = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.tag = tag;
    this.content = content;
    this.isXMLObject = true;
    this.selfclose = false;
    this.attributes = null;
    _ref = this.content;
    for (index in _ref) {
      arg = _ref[index];
      if (type(arg) === 'object' && !('isXMLObject' in arg)) {
        this.attributes = arg;
        this.content.splice(index, 1);
      }
    }
    if (this.tag.slice(-1) === '/') {
      this.selfclose = true;
      this.tag = this.tag.slice(0, -1);
      this.content = '';
    }
    if (!this.attributes) {
      this.attributes = {};
    }
    this.refresh();
  }

  XML.prototype.refresh = function() {
    var c, key, value, _i, _len, _ref, _ref1, _results;
    _ref = this.attributes;
    for (key in _ref) {
      value = _ref[key];
      this.create_property(key, value);
    }
    _ref1 = this.content;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      c = _ref1[_i];
      if (type(c) === 'object') {
        _results.push(this.create_tag(c.tag, c));
      }
    }
    return _results;
  };

  XML.prototype.append = function(obj, index) {
    this.content.splice(index != null ? index : this.content.length, 0, obj);
    return this.refresh();
  };

  XML.prototype.remove = function(index, ammount) {
    this.content.splice(index, ammount != null ? ammount : 1);
    return this.refresh();
  };

  XML.prototype.text = function(str) {
    if (!str) {
      return this.content;
    } else if (str) {
      return this.content = [str];
    }
  };

  XML.prototype.create_property = function(key, value) {
    return this[key] = function(v) {
      if (v) {
        return this.attributes[key] = v;
      } else if (!v) {
        return this.attributes[key];
      }
    };
  };

  XML.prototype.create_tag = function(tag, xml_object) {
    if (tag in this) {
      if (type(this[tag]) === 'array') {
        return this[tag].push(xml_object);
      } else {
        return this[tag] = [this[tag], xml_object];
      }
    } else if (!(tag in this)) {
      return this[tag] = xml_object;
    }
  };

  XML.prototype._convert_attributes = function() {
    var key, value, values;
    values = (function() {
      var _ref, _results;
      _ref = this.attributes;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        value = type(value) === 'array' ? value.join(" ") : value;
        if (value) {
          _results.push("" + key + "=\"" + value + "\"");
        } else {
          _results.push(key);
        }
      }
      return _results;
    }).call(this);
    return this.converted_attributes = this.attributes ? " " + (values.join(" ")) : "";
  };

  XML.prototype._convert_content = function() {
    var c, contents;
    contents = (function() {
      var _i, _len, _ref, _results;
      _ref = this.content;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        if (type(c) === 'object') {
          _results.push(c.xml());
        } else {
          _results.push(c);
        }
      }
      return _results;
    }).call(this);
    return this.converted_content = contents.join(' ');
  };

  XML.prototype.xml = function() {
    this._convert_attributes();
    this._convert_content();
    if (this.selfclose === true) {
      return "<" + this.tag + this.converted_attributes + "/>";
    } else if (this.selfclose === false) {
      return "<" + this.tag + this.converted_attributes + ">" + this.converted_content + "</" + this.tag + ">";
    }
  };

  return XML;

})();

_A = (function(_super) {
  __extends(_A, _super);

  function _A() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _A.__super__.constructor.apply(this, ["a"].concat(__slice.call(args)));
  }

  return _A;

})(XML);

A = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_A, args, function(){});
};

_ABBR = (function(_super) {
  __extends(_ABBR, _super);

  function _ABBR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ABBR.__super__.constructor.apply(this, ["abbr"].concat(__slice.call(args)));
  }

  return _ABBR;

})(XML);

ABBR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_ABBR, args, function(){});
};

_ACRONYM = (function(_super) {
  __extends(_ACRONYM, _super);

  function _ACRONYM() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ACRONYM.__super__.constructor.apply(this, ["acronym"].concat(__slice.call(args)));
  }

  return _ACRONYM;

})(XML);

ACRONYM = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_ACRONYM, args, function(){});
};

_ADDRESS = (function(_super) {
  __extends(_ADDRESS, _super);

  function _ADDRESS() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ADDRESS.__super__.constructor.apply(this, ["address"].concat(__slice.call(args)));
  }

  return _ADDRESS;

})(XML);

ADDRESS = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_ADDRESS, args, function(){});
};

_APPLET = (function(_super) {
  __extends(_APPLET, _super);

  function _APPLET() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _APPLET.__super__.constructor.apply(this, ["applet"].concat(__slice.call(args)));
  }

  return _APPLET;

})(XML);

APPLET = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_APPLET, args, function(){});
};

_AREA = (function(_super) {
  __extends(_AREA, _super);

  function _AREA() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _AREA.__super__.constructor.apply(this, ["area/"].concat(__slice.call(args)));
  }

  return _AREA;

})(XML);

AREA = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_AREA, args, function(){});
};

_ARTICLE = (function(_super) {
  __extends(_ARTICLE, _super);

  function _ARTICLE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ARTICLE.__super__.constructor.apply(this, ["article"].concat(__slice.call(args)));
  }

  return _ARTICLE;

})(XML);

ARTICLE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_ARTICLE, args, function(){});
};

_ASIDE = (function(_super) {
  __extends(_ASIDE, _super);

  function _ASIDE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ASIDE.__super__.constructor.apply(this, ["aside"].concat(__slice.call(args)));
  }

  return _ASIDE;

})(XML);

ASIDE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_ASIDE, args, function(){});
};

_AUDIO = (function(_super) {
  __extends(_AUDIO, _super);

  function _AUDIO() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _AUDIO.__super__.constructor.apply(this, ["audio"].concat(__slice.call(args)));
  }

  return _AUDIO;

})(XML);

AUDIO = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_AUDIO, args, function(){});
};

_B = (function(_super) {
  __extends(_B, _super);

  function _B() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _B.__super__.constructor.apply(this, ["b"].concat(__slice.call(args)));
  }

  return _B;

})(XML);

B = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_B, args, function(){});
};

_BASE = (function(_super) {
  __extends(_BASE, _super);

  function _BASE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BASE.__super__.constructor.apply(this, ["base/"].concat(__slice.call(args)));
  }

  return _BASE;

})(XML);

BASE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BASE, args, function(){});
};

_BASEFONT = (function(_super) {
  __extends(_BASEFONT, _super);

  function _BASEFONT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BASEFONT.__super__.constructor.apply(this, ["basefont"].concat(__slice.call(args)));
  }

  return _BASEFONT;

})(XML);

BASEFONT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BASEFONT, args, function(){});
};

_BDI = (function(_super) {
  __extends(_BDI, _super);

  function _BDI() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BDI.__super__.constructor.apply(this, ["bdi"].concat(__slice.call(args)));
  }

  return _BDI;

})(XML);

BDI = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BDI, args, function(){});
};

_BDO = (function(_super) {
  __extends(_BDO, _super);

  function _BDO() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BDO.__super__.constructor.apply(this, ["bdo"].concat(__slice.call(args)));
  }

  return _BDO;

})(XML);

BDO = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BDO, args, function(){});
};

_BGSOUND = (function(_super) {
  __extends(_BGSOUND, _super);

  function _BGSOUND() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BGSOUND.__super__.constructor.apply(this, ["bgsound"].concat(__slice.call(args)));
  }

  return _BGSOUND;

})(XML);

BGSOUND = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BGSOUND, args, function(){});
};

_BIG = (function(_super) {
  __extends(_BIG, _super);

  function _BIG() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BIG.__super__.constructor.apply(this, ["big"].concat(__slice.call(args)));
  }

  return _BIG;

})(XML);

BIG = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BIG, args, function(){});
};

_BLINK = (function(_super) {
  __extends(_BLINK, _super);

  function _BLINK() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BLINK.__super__.constructor.apply(this, ["blink"].concat(__slice.call(args)));
  }

  return _BLINK;

})(XML);

BLINK = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BLINK, args, function(){});
};

_BLOCKQUOTE = (function(_super) {
  __extends(_BLOCKQUOTE, _super);

  function _BLOCKQUOTE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BLOCKQUOTE.__super__.constructor.apply(this, ["blockquote"].concat(__slice.call(args)));
  }

  return _BLOCKQUOTE;

})(XML);

BLOCKQUOTE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BLOCKQUOTE, args, function(){});
};

_BODY = (function(_super) {
  __extends(_BODY, _super);

  function _BODY() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BODY.__super__.constructor.apply(this, ["body"].concat(__slice.call(args)));
  }

  return _BODY;

})(XML);

BODY = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BODY, args, function(){});
};

_BR = (function(_super) {
  __extends(_BR, _super);

  function _BR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BR.__super__.constructor.apply(this, ["br/"].concat(__slice.call(args)));
  }

  return _BR;

})(XML);

BR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BR, args, function(){});
};

_BUTTON = (function(_super) {
  __extends(_BUTTON, _super);

  function _BUTTON() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _BUTTON.__super__.constructor.apply(this, ["button"].concat(__slice.call(args)));
  }

  return _BUTTON;

})(XML);

BUTTON = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_BUTTON, args, function(){});
};

_CANVAS = (function(_super) {
  __extends(_CANVAS, _super);

  function _CANVAS() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _CANVAS.__super__.constructor.apply(this, ["canvas"].concat(__slice.call(args)));
  }

  return _CANVAS;

})(XML);

CANVAS = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_CANVAS, args, function(){});
};

_CAPTION = (function(_super) {
  __extends(_CAPTION, _super);

  function _CAPTION() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _CAPTION.__super__.constructor.apply(this, ["caption"].concat(__slice.call(args)));
  }

  return _CAPTION;

})(XML);

CAPTION = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_CAPTION, args, function(){});
};

_CENTER = (function(_super) {
  __extends(_CENTER, _super);

  function _CENTER() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _CENTER.__super__.constructor.apply(this, ["center"].concat(__slice.call(args)));
  }

  return _CENTER;

})(XML);

CENTER = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_CENTER, args, function(){});
};

_CITE = (function(_super) {
  __extends(_CITE, _super);

  function _CITE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _CITE.__super__.constructor.apply(this, ["cite"].concat(__slice.call(args)));
  }

  return _CITE;

})(XML);

CITE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_CITE, args, function(){});
};

_CODE = (function(_super) {
  __extends(_CODE, _super);

  function _CODE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _CODE.__super__.constructor.apply(this, ["code"].concat(__slice.call(args)));
  }

  return _CODE;

})(XML);

CODE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_CODE, args, function(){});
};

_COL = (function(_super) {
  __extends(_COL, _super);

  function _COL() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _COL.__super__.constructor.apply(this, ["col/"].concat(__slice.call(args)));
  }

  return _COL;

})(XML);

COL = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_COL, args, function(){});
};

_COLGROUP = (function(_super) {
  __extends(_COLGROUP, _super);

  function _COLGROUP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _COLGROUP.__super__.constructor.apply(this, ["colgroup"].concat(__slice.call(args)));
  }

  return _COLGROUP;

})(XML);

COLGROUP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_COLGROUP, args, function(){});
};

_CONTENT = (function(_super) {
  __extends(_CONTENT, _super);

  function _CONTENT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _CONTENT.__super__.constructor.apply(this, ["content"].concat(__slice.call(args)));
  }

  return _CONTENT;

})(XML);

CONTENT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_CONTENT, args, function(){});
};

_DATA = (function(_super) {
  __extends(_DATA, _super);

  function _DATA() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DATA.__super__.constructor.apply(this, ["data"].concat(__slice.call(args)));
  }

  return _DATA;

})(XML);

DATA = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DATA, args, function(){});
};

_DATALIST = (function(_super) {
  __extends(_DATALIST, _super);

  function _DATALIST() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DATALIST.__super__.constructor.apply(this, ["datalist"].concat(__slice.call(args)));
  }

  return _DATALIST;

})(XML);

DATALIST = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DATALIST, args, function(){});
};

_DD = (function(_super) {
  __extends(_DD, _super);

  function _DD() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DD.__super__.constructor.apply(this, ["dd"].concat(__slice.call(args)));
  }

  return _DD;

})(XML);

DD = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DD, args, function(){});
};

_DECORATOR = (function(_super) {
  __extends(_DECORATOR, _super);

  function _DECORATOR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DECORATOR.__super__.constructor.apply(this, ["decorator"].concat(__slice.call(args)));
  }

  return _DECORATOR;

})(XML);

DECORATOR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DECORATOR, args, function(){});
};

_DEL = (function(_super) {
  __extends(_DEL, _super);

  function _DEL() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DEL.__super__.constructor.apply(this, ["del"].concat(__slice.call(args)));
  }

  return _DEL;

})(XML);

DEL = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DEL, args, function(){});
};

_DETAILS = (function(_super) {
  __extends(_DETAILS, _super);

  function _DETAILS() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DETAILS.__super__.constructor.apply(this, ["details"].concat(__slice.call(args)));
  }

  return _DETAILS;

})(XML);

DETAILS = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DETAILS, args, function(){});
};

_DFN = (function(_super) {
  __extends(_DFN, _super);

  function _DFN() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DFN.__super__.constructor.apply(this, ["dfn"].concat(__slice.call(args)));
  }

  return _DFN;

})(XML);

DFN = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DFN, args, function(){});
};

_DIR = (function(_super) {
  __extends(_DIR, _super);

  function _DIR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DIR.__super__.constructor.apply(this, ["dir"].concat(__slice.call(args)));
  }

  return _DIR;

})(XML);

DIR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DIR, args, function(){});
};

_DIV = (function(_super) {
  __extends(_DIV, _super);

  function _DIV() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DIV.__super__.constructor.apply(this, ["div"].concat(__slice.call(args)));
  }

  return _DIV;

})(XML);

DIV = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DIV, args, function(){});
};

_DL = (function(_super) {
  __extends(_DL, _super);

  function _DL() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DL.__super__.constructor.apply(this, ["dl"].concat(__slice.call(args)));
  }

  return _DL;

})(XML);

DL = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DL, args, function(){});
};

_DT = (function(_super) {
  __extends(_DT, _super);

  function _DT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _DT.__super__.constructor.apply(this, ["dt"].concat(__slice.call(args)));
  }

  return _DT;

})(XML);

DT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_DT, args, function(){});
};

_ELEMENT = (function(_super) {
  __extends(_ELEMENT, _super);

  function _ELEMENT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ELEMENT.__super__.constructor.apply(this, ["element"].concat(__slice.call(args)));
  }

  return _ELEMENT;

})(XML);

ELEMENT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_ELEMENT, args, function(){});
};

_EM = (function(_super) {
  __extends(_EM, _super);

  function _EM() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _EM.__super__.constructor.apply(this, ["em"].concat(__slice.call(args)));
  }

  return _EM;

})(XML);

EM = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_EM, args, function(){});
};

_EMBED = (function(_super) {
  __extends(_EMBED, _super);

  function _EMBED() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _EMBED.__super__.constructor.apply(this, ["embed/"].concat(__slice.call(args)));
  }

  return _EMBED;

})(XML);

EMBED = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_EMBED, args, function(){});
};

_FIELDSET = (function(_super) {
  __extends(_FIELDSET, _super);

  function _FIELDSET() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FIELDSET.__super__.constructor.apply(this, ["fieldset"].concat(__slice.call(args)));
  }

  return _FIELDSET;

})(XML);

FIELDSET = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FIELDSET, args, function(){});
};

_FIGCAPTION = (function(_super) {
  __extends(_FIGCAPTION, _super);

  function _FIGCAPTION() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FIGCAPTION.__super__.constructor.apply(this, ["figcaption"].concat(__slice.call(args)));
  }

  return _FIGCAPTION;

})(XML);

FIGCAPTION = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FIGCAPTION, args, function(){});
};

_FIGURE = (function(_super) {
  __extends(_FIGURE, _super);

  function _FIGURE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FIGURE.__super__.constructor.apply(this, ["figure"].concat(__slice.call(args)));
  }

  return _FIGURE;

})(XML);

FIGURE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FIGURE, args, function(){});
};

_FONT = (function(_super) {
  __extends(_FONT, _super);

  function _FONT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FONT.__super__.constructor.apply(this, ["font"].concat(__slice.call(args)));
  }

  return _FONT;

})(XML);

FONT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FONT, args, function(){});
};

_FOOTER = (function(_super) {
  __extends(_FOOTER, _super);

  function _FOOTER() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FOOTER.__super__.constructor.apply(this, ["footer"].concat(__slice.call(args)));
  }

  return _FOOTER;

})(XML);

FOOTER = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FOOTER, args, function(){});
};

_FORM = (function(_super) {
  __extends(_FORM, _super);

  function _FORM() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FORM.__super__.constructor.apply(this, ["form"].concat(__slice.call(args)));
  }

  return _FORM;

})(XML);

FORM = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FORM, args, function(){});
};

_FRAME = (function(_super) {
  __extends(_FRAME, _super);

  function _FRAME() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FRAME.__super__.constructor.apply(this, ["frame"].concat(__slice.call(args)));
  }

  return _FRAME;

})(XML);

FRAME = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FRAME, args, function(){});
};

_FRAMESET = (function(_super) {
  __extends(_FRAMESET, _super);

  function _FRAMESET() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _FRAMESET.__super__.constructor.apply(this, ["frameset"].concat(__slice.call(args)));
  }

  return _FRAMESET;

})(XML);

FRAMESET = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_FRAMESET, args, function(){});
};

_H1 = (function(_super) {
  __extends(_H1, _super);

  function _H1() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _H1.__super__.constructor.apply(this, ["h1"].concat(__slice.call(args)));
  }

  return _H1;

})(XML);

H1 = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_H1, args, function(){});
};

_H2 = (function(_super) {
  __extends(_H2, _super);

  function _H2() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _H2.__super__.constructor.apply(this, ["h2"].concat(__slice.call(args)));
  }

  return _H2;

})(XML);

H2 = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_H2, args, function(){});
};

_H3 = (function(_super) {
  __extends(_H3, _super);

  function _H3() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _H3.__super__.constructor.apply(this, ["h3"].concat(__slice.call(args)));
  }

  return _H3;

})(XML);

H3 = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_H3, args, function(){});
};

_H4 = (function(_super) {
  __extends(_H4, _super);

  function _H4() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _H4.__super__.constructor.apply(this, ["h4"].concat(__slice.call(args)));
  }

  return _H4;

})(XML);

H4 = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_H4, args, function(){});
};

_H5 = (function(_super) {
  __extends(_H5, _super);

  function _H5() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _H5.__super__.constructor.apply(this, ["h5"].concat(__slice.call(args)));
  }

  return _H5;

})(XML);

H5 = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_H5, args, function(){});
};

_H6 = (function(_super) {
  __extends(_H6, _super);

  function _H6() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _H6.__super__.constructor.apply(this, ["h6"].concat(__slice.call(args)));
  }

  return _H6;

})(XML);

H6 = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_H6, args, function(){});
};

_HEAD = (function(_super) {
  __extends(_HEAD, _super);

  function _HEAD() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _HEAD.__super__.constructor.apply(this, ["head"].concat(__slice.call(args)));
  }

  return _HEAD;

})(XML);

HEAD = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_HEAD, args, function(){});
};

_HEADER = (function(_super) {
  __extends(_HEADER, _super);

  function _HEADER() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _HEADER.__super__.constructor.apply(this, ["header"].concat(__slice.call(args)));
  }

  return _HEADER;

})(XML);

HEADER = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_HEADER, args, function(){});
};

_HGROUP = (function(_super) {
  __extends(_HGROUP, _super);

  function _HGROUP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _HGROUP.__super__.constructor.apply(this, ["hgroup"].concat(__slice.call(args)));
  }

  return _HGROUP;

})(XML);

HGROUP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_HGROUP, args, function(){});
};

_HR = (function(_super) {
  __extends(_HR, _super);

  function _HR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _HR.__super__.constructor.apply(this, ["hr/"].concat(__slice.call(args)));
  }

  return _HR;

})(XML);

HR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_HR, args, function(){});
};

_HTML = (function(_super) {
  __extends(_HTML, _super);

  function _HTML() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _HTML.__super__.constructor.apply(this, ["html"].concat(__slice.call(args)));
  }

  return _HTML;

})(XML);

HTML = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_HTML, args, function(){});
};

_I = (function(_super) {
  __extends(_I, _super);

  function _I() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _I.__super__.constructor.apply(this, ["i"].concat(__slice.call(args)));
  }

  return _I;

})(XML);

I = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_I, args, function(){});
};

_IFRAME = (function(_super) {
  __extends(_IFRAME, _super);

  function _IFRAME() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _IFRAME.__super__.constructor.apply(this, ["iframe"].concat(__slice.call(args)));
  }

  return _IFRAME;

})(XML);

IFRAME = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_IFRAME, args, function(){});
};

_IMG = (function(_super) {
  __extends(_IMG, _super);

  function _IMG() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _IMG.__super__.constructor.apply(this, ["img/"].concat(__slice.call(args)));
  }

  return _IMG;

})(XML);

IMG = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_IMG, args, function(){});
};

_INPUT = (function(_super) {
  __extends(_INPUT, _super);

  function _INPUT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _INPUT.__super__.constructor.apply(this, ["input/"].concat(__slice.call(args)));
  }

  return _INPUT;

})(XML);

INPUT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_INPUT, args, function(){});
};

_INS = (function(_super) {
  __extends(_INS, _super);

  function _INS() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _INS.__super__.constructor.apply(this, ["ins"].concat(__slice.call(args)));
  }

  return _INS;

})(XML);

INS = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_INS, args, function(){});
};

_ISINDEX = (function(_super) {
  __extends(_ISINDEX, _super);

  function _ISINDEX() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ISINDEX.__super__.constructor.apply(this, ["isindex"].concat(__slice.call(args)));
  }

  return _ISINDEX;

})(XML);

ISINDEX = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_ISINDEX, args, function(){});
};

_KBD = (function(_super) {
  __extends(_KBD, _super);

  function _KBD() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _KBD.__super__.constructor.apply(this, ["kbd"].concat(__slice.call(args)));
  }

  return _KBD;

})(XML);

KBD = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_KBD, args, function(){});
};

_KEYGEN = (function(_super) {
  __extends(_KEYGEN, _super);

  function _KEYGEN() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _KEYGEN.__super__.constructor.apply(this, ["keygen/"].concat(__slice.call(args)));
  }

  return _KEYGEN;

})(XML);

KEYGEN = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_KEYGEN, args, function(){});
};

_LABEL = (function(_super) {
  __extends(_LABEL, _super);

  function _LABEL() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _LABEL.__super__.constructor.apply(this, ["label"].concat(__slice.call(args)));
  }

  return _LABEL;

})(XML);

LABEL = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_LABEL, args, function(){});
};

_LEGEND = (function(_super) {
  __extends(_LEGEND, _super);

  function _LEGEND() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _LEGEND.__super__.constructor.apply(this, ["legend"].concat(__slice.call(args)));
  }

  return _LEGEND;

})(XML);

LEGEND = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_LEGEND, args, function(){});
};

_LI = (function(_super) {
  __extends(_LI, _super);

  function _LI() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _LI.__super__.constructor.apply(this, ["li"].concat(__slice.call(args)));
  }

  return _LI;

})(XML);

LI = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_LI, args, function(){});
};

_LINK = (function(_super) {
  __extends(_LINK, _super);

  function _LINK() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _LINK.__super__.constructor.apply(this, ["link/"].concat(__slice.call(args)));
  }

  return _LINK;

})(XML);

LINK = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_LINK, args, function(){});
};

_LISTING = (function(_super) {
  __extends(_LISTING, _super);

  function _LISTING() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _LISTING.__super__.constructor.apply(this, ["listing"].concat(__slice.call(args)));
  }

  return _LISTING;

})(XML);

LISTING = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_LISTING, args, function(){});
};

_MAIN = (function(_super) {
  __extends(_MAIN, _super);

  function _MAIN() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _MAIN.__super__.constructor.apply(this, ["main"].concat(__slice.call(args)));
  }

  return _MAIN;

})(XML);

MAIN = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_MAIN, args, function(){});
};

_MAP = (function(_super) {
  __extends(_MAP, _super);

  function _MAP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _MAP.__super__.constructor.apply(this, ["map"].concat(__slice.call(args)));
  }

  return _MAP;

})(XML);

MAP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_MAP, args, function(){});
};

_MARK = (function(_super) {
  __extends(_MARK, _super);

  function _MARK() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _MARK.__super__.constructor.apply(this, ["mark"].concat(__slice.call(args)));
  }

  return _MARK;

})(XML);

MARK = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_MARK, args, function(){});
};

_MARQUEE = (function(_super) {
  __extends(_MARQUEE, _super);

  function _MARQUEE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _MARQUEE.__super__.constructor.apply(this, ["marquee"].concat(__slice.call(args)));
  }

  return _MARQUEE;

})(XML);

MARQUEE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_MARQUEE, args, function(){});
};

_MENU = (function(_super) {
  __extends(_MENU, _super);

  function _MENU() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _MENU.__super__.constructor.apply(this, ["menu"].concat(__slice.call(args)));
  }

  return _MENU;

})(XML);

MENU = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_MENU, args, function(){});
};

_MENUITEM = (function(_super) {
  __extends(_MENUITEM, _super);

  function _MENUITEM() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _MENUITEM.__super__.constructor.apply(this, ["menuitem"].concat(__slice.call(args)));
  }

  return _MENUITEM;

})(XML);

MENUITEM = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_MENUITEM, args, function(){});
};

_META = (function(_super) {
  __extends(_META, _super);

  function _META() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _META.__super__.constructor.apply(this, ["meta/"].concat(__slice.call(args)));
  }

  return _META;

})(XML);

META = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_META, args, function(){});
};

_METER = (function(_super) {
  __extends(_METER, _super);

  function _METER() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _METER.__super__.constructor.apply(this, ["meter"].concat(__slice.call(args)));
  }

  return _METER;

})(XML);

METER = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_METER, args, function(){});
};

_NAV = (function(_super) {
  __extends(_NAV, _super);

  function _NAV() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _NAV.__super__.constructor.apply(this, ["nav"].concat(__slice.call(args)));
  }

  return _NAV;

})(XML);

NAV = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_NAV, args, function(){});
};

_NOBR = (function(_super) {
  __extends(_NOBR, _super);

  function _NOBR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _NOBR.__super__.constructor.apply(this, ["nobr"].concat(__slice.call(args)));
  }

  return _NOBR;

})(XML);

NOBR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_NOBR, args, function(){});
};

_NOFRAMES = (function(_super) {
  __extends(_NOFRAMES, _super);

  function _NOFRAMES() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _NOFRAMES.__super__.constructor.apply(this, ["noframes"].concat(__slice.call(args)));
  }

  return _NOFRAMES;

})(XML);

NOFRAMES = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_NOFRAMES, args, function(){});
};

_NOSCRIPT = (function(_super) {
  __extends(_NOSCRIPT, _super);

  function _NOSCRIPT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _NOSCRIPT.__super__.constructor.apply(this, ["noscript"].concat(__slice.call(args)));
  }

  return _NOSCRIPT;

})(XML);

NOSCRIPT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_NOSCRIPT, args, function(){});
};

_OBJECT = (function(_super) {
  __extends(_OBJECT, _super);

  function _OBJECT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _OBJECT.__super__.constructor.apply(this, ["object"].concat(__slice.call(args)));
  }

  return _OBJECT;

})(XML);

OBJECT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_OBJECT, args, function(){});
};

_OL = (function(_super) {
  __extends(_OL, _super);

  function _OL() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _OL.__super__.constructor.apply(this, ["ol"].concat(__slice.call(args)));
  }

  return _OL;

})(XML);

OL = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_OL, args, function(){});
};

_OPTGROUP = (function(_super) {
  __extends(_OPTGROUP, _super);

  function _OPTGROUP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _OPTGROUP.__super__.constructor.apply(this, ["optgroup"].concat(__slice.call(args)));
  }

  return _OPTGROUP;

})(XML);

OPTGROUP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_OPTGROUP, args, function(){});
};

_OPTION = (function(_super) {
  __extends(_OPTION, _super);

  function _OPTION() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _OPTION.__super__.constructor.apply(this, ["option"].concat(__slice.call(args)));
  }

  return _OPTION;

})(XML);

OPTION = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_OPTION, args, function(){});
};

_OUTPUT = (function(_super) {
  __extends(_OUTPUT, _super);

  function _OUTPUT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _OUTPUT.__super__.constructor.apply(this, ["output"].concat(__slice.call(args)));
  }

  return _OUTPUT;

})(XML);

OUTPUT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_OUTPUT, args, function(){});
};

_P = (function(_super) {
  __extends(_P, _super);

  function _P() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _P.__super__.constructor.apply(this, ["p"].concat(__slice.call(args)));
  }

  return _P;

})(XML);

P = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_P, args, function(){});
};

_PARAM = (function(_super) {
  __extends(_PARAM, _super);

  function _PARAM() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _PARAM.__super__.constructor.apply(this, ["param/"].concat(__slice.call(args)));
  }

  return _PARAM;

})(XML);

PARAM = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_PARAM, args, function(){});
};

_PLAINTEXT = (function(_super) {
  __extends(_PLAINTEXT, _super);

  function _PLAINTEXT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _PLAINTEXT.__super__.constructor.apply(this, ["plaintext"].concat(__slice.call(args)));
  }

  return _PLAINTEXT;

})(XML);

PLAINTEXT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_PLAINTEXT, args, function(){});
};

_PRE = (function(_super) {
  __extends(_PRE, _super);

  function _PRE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _PRE.__super__.constructor.apply(this, ["pre"].concat(__slice.call(args)));
  }

  return _PRE;

})(XML);

PRE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_PRE, args, function(){});
};

_PROGRESS = (function(_super) {
  __extends(_PROGRESS, _super);

  function _PROGRESS() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _PROGRESS.__super__.constructor.apply(this, ["progress"].concat(__slice.call(args)));
  }

  return _PROGRESS;

})(XML);

PROGRESS = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_PROGRESS, args, function(){});
};

_Q = (function(_super) {
  __extends(_Q, _super);

  function _Q() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _Q.__super__.constructor.apply(this, ["q"].concat(__slice.call(args)));
  }

  return _Q;

})(XML);

Q = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_Q, args, function(){});
};

_RP = (function(_super) {
  __extends(_RP, _super);

  function _RP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _RP.__super__.constructor.apply(this, ["rp"].concat(__slice.call(args)));
  }

  return _RP;

})(XML);

RP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_RP, args, function(){});
};

_RT = (function(_super) {
  __extends(_RT, _super);

  function _RT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _RT.__super__.constructor.apply(this, ["rt"].concat(__slice.call(args)));
  }

  return _RT;

})(XML);

RT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_RT, args, function(){});
};

_RUBY = (function(_super) {
  __extends(_RUBY, _super);

  function _RUBY() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _RUBY.__super__.constructor.apply(this, ["ruby"].concat(__slice.call(args)));
  }

  return _RUBY;

})(XML);

RUBY = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_RUBY, args, function(){});
};

_S = (function(_super) {
  __extends(_S, _super);

  function _S() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _S.__super__.constructor.apply(this, ["s"].concat(__slice.call(args)));
  }

  return _S;

})(XML);

S = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_S, args, function(){});
};

_SAMP = (function(_super) {
  __extends(_SAMP, _super);

  function _SAMP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SAMP.__super__.constructor.apply(this, ["samp"].concat(__slice.call(args)));
  }

  return _SAMP;

})(XML);

SAMP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SAMP, args, function(){});
};

_SCRIPT = (function(_super) {
  __extends(_SCRIPT, _super);

  function _SCRIPT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SCRIPT.__super__.constructor.apply(this, ["script"].concat(__slice.call(args)));
  }

  return _SCRIPT;

})(XML);

SCRIPT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SCRIPT, args, function(){});
};

_SECTION = (function(_super) {
  __extends(_SECTION, _super);

  function _SECTION() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SECTION.__super__.constructor.apply(this, ["section"].concat(__slice.call(args)));
  }

  return _SECTION;

})(XML);

SECTION = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SECTION, args, function(){});
};

_SELECT = (function(_super) {
  __extends(_SELECT, _super);

  function _SELECT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SELECT.__super__.constructor.apply(this, ["select"].concat(__slice.call(args)));
  }

  return _SELECT;

})(XML);

SELECT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SELECT, args, function(){});
};

_SHADOW = (function(_super) {
  __extends(_SHADOW, _super);

  function _SHADOW() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SHADOW.__super__.constructor.apply(this, ["shadow"].concat(__slice.call(args)));
  }

  return _SHADOW;

})(XML);

SHADOW = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SHADOW, args, function(){});
};

_SMALL = (function(_super) {
  __extends(_SMALL, _super);

  function _SMALL() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SMALL.__super__.constructor.apply(this, ["small"].concat(__slice.call(args)));
  }

  return _SMALL;

})(XML);

SMALL = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SMALL, args, function(){});
};

_SOURCE = (function(_super) {
  __extends(_SOURCE, _super);

  function _SOURCE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SOURCE.__super__.constructor.apply(this, ["source/"].concat(__slice.call(args)));
  }

  return _SOURCE;

})(XML);

SOURCE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SOURCE, args, function(){});
};

_SPACER = (function(_super) {
  __extends(_SPACER, _super);

  function _SPACER() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SPACER.__super__.constructor.apply(this, ["spacer"].concat(__slice.call(args)));
  }

  return _SPACER;

})(XML);

SPACER = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SPACER, args, function(){});
};

_SPAN = (function(_super) {
  __extends(_SPAN, _super);

  function _SPAN() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SPAN.__super__.constructor.apply(this, ["span"].concat(__slice.call(args)));
  }

  return _SPAN;

})(XML);

SPAN = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SPAN, args, function(){});
};

_STRIKE = (function(_super) {
  __extends(_STRIKE, _super);

  function _STRIKE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _STRIKE.__super__.constructor.apply(this, ["strike"].concat(__slice.call(args)));
  }

  return _STRIKE;

})(XML);

STRIKE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_STRIKE, args, function(){});
};

_STRONG = (function(_super) {
  __extends(_STRONG, _super);

  function _STRONG() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _STRONG.__super__.constructor.apply(this, ["strong"].concat(__slice.call(args)));
  }

  return _STRONG;

})(XML);

STRONG = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_STRONG, args, function(){});
};

_STYLE = (function(_super) {
  __extends(_STYLE, _super);

  function _STYLE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _STYLE.__super__.constructor.apply(this, ["style"].concat(__slice.call(args)));
  }

  return _STYLE;

})(XML);

STYLE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_STYLE, args, function(){});
};

_SUB = (function(_super) {
  __extends(_SUB, _super);

  function _SUB() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SUB.__super__.constructor.apply(this, ["sub"].concat(__slice.call(args)));
  }

  return _SUB;

})(XML);

SUB = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SUB, args, function(){});
};

_SUMMARY = (function(_super) {
  __extends(_SUMMARY, _super);

  function _SUMMARY() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SUMMARY.__super__.constructor.apply(this, ["summary"].concat(__slice.call(args)));
  }

  return _SUMMARY;

})(XML);

SUMMARY = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SUMMARY, args, function(){});
};

_SUP = (function(_super) {
  __extends(_SUP, _super);

  function _SUP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _SUP.__super__.constructor.apply(this, ["sup"].concat(__slice.call(args)));
  }

  return _SUP;

})(XML);

SUP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_SUP, args, function(){});
};

_TABLE = (function(_super) {
  __extends(_TABLE, _super);

  function _TABLE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TABLE.__super__.constructor.apply(this, ["table"].concat(__slice.call(args)));
  }

  return _TABLE;

})(XML);

TABLE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TABLE, args, function(){});
};

_TBODY = (function(_super) {
  __extends(_TBODY, _super);

  function _TBODY() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TBODY.__super__.constructor.apply(this, ["tbody"].concat(__slice.call(args)));
  }

  return _TBODY;

})(XML);

TBODY = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TBODY, args, function(){});
};

_TD = (function(_super) {
  __extends(_TD, _super);

  function _TD() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TD.__super__.constructor.apply(this, ["td"].concat(__slice.call(args)));
  }

  return _TD;

})(XML);

TD = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TD, args, function(){});
};

_TEMPLATE = (function(_super) {
  __extends(_TEMPLATE, _super);

  function _TEMPLATE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TEMPLATE.__super__.constructor.apply(this, ["template"].concat(__slice.call(args)));
  }

  return _TEMPLATE;

})(XML);

TEMPLATE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TEMPLATE, args, function(){});
};

_TEXTAREA = (function(_super) {
  __extends(_TEXTAREA, _super);

  function _TEXTAREA() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TEXTAREA.__super__.constructor.apply(this, ["textarea"].concat(__slice.call(args)));
  }

  return _TEXTAREA;

})(XML);

TEXTAREA = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TEXTAREA, args, function(){});
};

_TFOOT = (function(_super) {
  __extends(_TFOOT, _super);

  function _TFOOT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TFOOT.__super__.constructor.apply(this, ["tfoot"].concat(__slice.call(args)));
  }

  return _TFOOT;

})(XML);

TFOOT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TFOOT, args, function(){});
};

_TH = (function(_super) {
  __extends(_TH, _super);

  function _TH() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TH.__super__.constructor.apply(this, ["th"].concat(__slice.call(args)));
  }

  return _TH;

})(XML);

TH = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TH, args, function(){});
};

_THEAD = (function(_super) {
  __extends(_THEAD, _super);

  function _THEAD() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _THEAD.__super__.constructor.apply(this, ["thead"].concat(__slice.call(args)));
  }

  return _THEAD;

})(XML);

THEAD = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_THEAD, args, function(){});
};

_TIME = (function(_super) {
  __extends(_TIME, _super);

  function _TIME() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TIME.__super__.constructor.apply(this, ["time"].concat(__slice.call(args)));
  }

  return _TIME;

})(XML);

TIME = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TIME, args, function(){});
};

_TITLE = (function(_super) {
  __extends(_TITLE, _super);

  function _TITLE() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TITLE.__super__.constructor.apply(this, ["title"].concat(__slice.call(args)));
  }

  return _TITLE;

})(XML);

TITLE = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TITLE, args, function(){});
};

_TR = (function(_super) {
  __extends(_TR, _super);

  function _TR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TR.__super__.constructor.apply(this, ["tr"].concat(__slice.call(args)));
  }

  return _TR;

})(XML);

TR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TR, args, function(){});
};

_TRACK = (function(_super) {
  __extends(_TRACK, _super);

  function _TRACK() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TRACK.__super__.constructor.apply(this, ["track/"].concat(__slice.call(args)));
  }

  return _TRACK;

})(XML);

TRACK = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TRACK, args, function(){});
};

_TT = (function(_super) {
  __extends(_TT, _super);

  function _TT() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _TT.__super__.constructor.apply(this, ["tt"].concat(__slice.call(args)));
  }

  return _TT;

})(XML);

TT = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_TT, args, function(){});
};

_U = (function(_super) {
  __extends(_U, _super);

  function _U() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _U.__super__.constructor.apply(this, ["u"].concat(__slice.call(args)));
  }

  return _U;

})(XML);

U = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_U, args, function(){});
};

_UL = (function(_super) {
  __extends(_UL, _super);

  function _UL() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _UL.__super__.constructor.apply(this, ["ul"].concat(__slice.call(args)));
  }

  return _UL;

})(XML);

UL = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_UL, args, function(){});
};

_VAR = (function(_super) {
  __extends(_VAR, _super);

  function _VAR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _VAR.__super__.constructor.apply(this, ["var"].concat(__slice.call(args)));
  }

  return _VAR;

})(XML);

VAR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_VAR, args, function(){});
};

_VIDEO = (function(_super) {
  __extends(_VIDEO, _super);

  function _VIDEO() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _VIDEO.__super__.constructor.apply(this, ["video"].concat(__slice.call(args)));
  }

  return _VIDEO;

})(XML);

VIDEO = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_VIDEO, args, function(){});
};

_WBR = (function(_super) {
  __extends(_WBR, _super);

  function _WBR() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _WBR.__super__.constructor.apply(this, ["wbr/"].concat(__slice.call(args)));
  }

  return _WBR;

})(XML);

WBR = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_WBR, args, function(){});
};

_XMP = (function(_super) {
  __extends(_XMP, _super);

  function _XMP() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _XMP.__super__.constructor.apply(this, ["xmp"].concat(__slice.call(args)));
  }

  return _XMP;

})(XML);

XMP = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return (function(func, args, ctor) {
    ctor.prototype = func.prototype;
    var child = new ctor, result = func.apply(child, args);
    return Object(result) === result ? result : child;
  })(_XMP, args, function(){});
};
